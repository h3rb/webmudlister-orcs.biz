.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.37
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::FromANSI 3"
.TH HTML::FromANSI 3 "2007-09-19" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
HTML::FromANSI \- Mark up ANSI sequences as HTML
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use HTML::FromANSI (); # avoid exports if using OO
\&    use Term::ANSIColor;
.Ve
.PP
.Vb 3
\&    my $h = HTML::FromANSI->new(
\&        fill_cols => 1,
\&    );
.Ve
.PP
.Vb 1
\&    $h->add_text(color('bold blue'), "This text is bold blue.");
.Ve
.PP
.Vb 1
\&    print $h->html;
.Ve
.PP
.Vb 1
\&    # you can append text in the new api:
.Ve
.PP
.Vb 1
\&    $h->add_text(color('bold blue'), " still blue.");
.Ve
.PP
.Vb 1
\&    print $h->html
.Ve
.PP
.Vb 1
\&    # The old API still works:
.Ve
.PP
.Vb 2
\&    $HTML::FromANSI::Options{fill_cols} = 1; # fill all 80 cols
\&    print ansi2html(color('bold blue'), "This text is bold blue.");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This small module converts \s-1ANSI\s0 text sequences to corresponding \s-1HTML\s0
codes, using stylesheets to control color and blinking properties.
.PP
It exports \f(CW\*(C`ansi2html()\*(C'\fR by default, which takes an array, joins it
it into a single scalar, and returns its \s-1HTML\s0 rendering.
.PP
From version 2.00 an object oriented api which is safer for multiple uses (no
more manipulation of shared \f(CW%Options\fR) is available. It is reccomended that
you no longer import any functions by doing:
.PP
.Vb 1
\&    use HTML::FromANSI ();
.Ve
.PP
and use the new documented \s-1API\s0 instead of the functional one.
.PP
The underlying \s-1ANSI\s0 code processing is done by Term::VT102, a \s-1DEC\s0 \s-1VT102\s0
terminal emulator. To generate \s-1ANSI\s0 codes for color changes, cursor movements
etc, take a look at Term::ANSIScreen and Term::ANSIColor.
.SH "METHODS"
.IX Header "METHODS"
.IP "new" 4
.IX Item "new"
The constructor. See \*(L"\s-1OPTIONS\s0\*(R" for the options it takes.
.ie n .IP "add_text @text" 4
.el .IP "add_text \f(CW@text\fR" 4
.IX Item "add_text @text"
Adds text input to the terminal emulator.
.IP "html" 4
.IX Item "html"
Renders the screen as computed by \f(CW\*(C`terminal_object\*(C'\fR into \s-1HTML\s0.
.ie n .IP "ansi_to_html @text" 4
.el .IP "ansi_to_html \f(CW@text\fR" 4
.IX Item "ansi_to_html @text"
A convenience method.
.Sp
Calls \f(CW\*(C`add_text\*(C'\fR and then \f(CW\*(C`html\*(C'\fR.
.IP "terminal_object" 4
.IX Item "terminal_object"
The underlying terminal emulator object.
.SH "OPTIONS"
.IX Header "OPTIONS"
These are parameters you can pass to \f(CW\*(C`new\*(C'\fR.
.IP "linewrap" 4
.IX Item "linewrap"
A boolean value to specify whether to wrap lines that exceeds
width specified by \f(CW\*(C`col\*(C'\fR, or simply truncate them. Defaults to \f(CW1\fR.
.Sp
Only takes effect if you override \f(CW\*(C`terminal_class\*(C'\fR or \f(CW\*(C`terminal_object\*(C'\fR with
a Term::VT102 (instead of Term::VT102::Boundless).
.IP "lf_to_crlf" 4
.IX Item "lf_to_crlf"
A boolean value to specify whether to translate all incoming
\&\en into \f(CW\*(C`\er\en\*(C'\fR or not; you generally wants to use this if your
data is from a file using unix line endings. The default is \f(CW0\fR
on MSWin32 and MacOS, and \f(CW1\fR on other platforms.
.IP "fill_cols" 4
.IX Item "fill_cols"
A boolean value to specify whether to fill empty columns with
space; use this if you want to maintain a \fIscreen-like\fR appearance
in the resulting \s-1HTML\s0, so that each row will be aligned properly.
Defaults to \f(CW0\fR.
.IP "html_entity" 4
.IX Item "html_entity"
A boolean value to specify whether to escape all high-bit characters
to \s-1HTML\s0 entities or not; defaults to \f(CW0\fR, which means only \f(CW\*(C`<\*(C'\fR,
\&\f(CW\*(C`>\*(C'\fR, \f(CW\*(C`"\*(C'\fR and \f(CW\*(C`&\*(C'\fR will be escaped. (Handy when processing most
\&\s-1ANSI\s0 art entries.)
.IP "cols" 4
.IX Item "cols"
A number specifying the width of the virtual terminal; defaults to 80.
.Sp
When \f(CW\*(C`Term::VT102::Boundless\*(C'\fR is in use (the default) this specifies the
minimum number of rows to draw.
.Sp
When using \f(CW\*(C`Term::VT102\*(C'\fR (by overriding \f(CW\*(C`terminal_class\*(C'\fR or
\&\f(CW\*(C`terminal_object\*(C'\fR) then the number of columns is fixed.
.IP "rows" 4
.IX Item "rows"
When \f(CW\*(C`Term::VT102::Boundless\*(C'\fR is in use (the default) this specifies the
minimum number of rows to draw.
.Sp
When Term::VT102 is in use (by overriding \f(CW\*(C`terminal_class\*(C'\fR or
terminal_object) then it sets the height of the virtual terminal; rows that
exceeds this number will be truncated.
.IP "font_face" 4
.IX Item "font_face"
A string used as the \f(CW\*(C`face\*(C'\fR attribute to the \f(CW\*(C`font\*(C'\fR tag enclosing the
\&\s-1HTML\s0 text; defaults to \f(CW\*(C`fixedsys, lucida console, terminal, vga, monospace\*(C'\fR.
.Sp
If this option and the \f(CW\*(C`style\*(C'\fR option are both set to empty strings, the
\&\f(CW\*(C`font\*(C'\fR tag will be omitted.
.IP "style" 4
.IX Item "style"
A string used as the \f(CW\*(C`style\*(C'\fR attribute to the \f(CW\*(C`font\*(C'\fR tag enclosing the
\&\s-1HTML\s0 text; defaults to <line\-height: 1; letter\-spacing: 0; font\-size: 12pt>.
.Sp
If this option and the \f(CW\*(C`font_face\*(C'\fR option are both set to empty strings, the
\&\f(CW\*(C`font\*(C'\fR tag will be omitted.
.IP "tt" 4
.IX Item "tt"
A boolean value specifying whether the \s-1HTML\s0 text should be enclosed in a
\&\f(CW\*(C`tt\*(C'\fR tag or not. Defaults to \f(CW1\fR.
.IP "show_cursor" 4
.IX Item "show_cursor"
A boolean value to control whether to highlight the character under
the cursor position, by reversing its background and foregroud color.
Defaults to \f(CW0\fR.
.Sp
If the cursor is on it's own line and \f(CW\*(C`show_cursor\*(C'\fR is set, then that row will
be omitted.
.IP "terminal_class" 4
.IX Item "terminal_class"
The class to instantiate \f(CW\*(C`terminal_object\*(C'\fR with. Defaults to
Term::VT102::Boundless.
.IP "terminal_object" 4
.IX Item "terminal_object"
Any Term::VT102 compatible object should work here.
.Sp
If you override it most values like \f(CW\*(C`cols\*(C'\fR, \f(CW\*(C`rows\*(C'\fR, \f(CW\*(C`terminal_class\*(C'\fR etc
will be ignored.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Term::VT102::Boundless, HTML::Entities, Term::ANSIScreen
.SH "AUTHORS"
.IX Header "AUTHORS"
Audrey Tang <audreyt@audreyt.org>
Yuval Kogman <nothingmuch@woobling.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2001, 2002, 2003 by Audrey Tang <audreyt@audreyt.org>.
.Sp
Copyright 2007 Yuval Kogman <nothingmuch@Woobling.org>
.Sp
This program is free software; you can redistribute it and/or
modify it under the terms of the \s-1MIT\s0 license or the same terms as Perl itself.
